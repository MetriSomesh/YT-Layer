// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  YOUTUBER
  EDITOR
}

model User{
  id         Int    @id @default( autoincrement())
  username String
  email String @unique
  password String
  token String @default("") 
  userType UserType
  youtuber YouTuber?
  editor Editor?
}


model YouTuber {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  user         User      @relation(fields: [userId], references: [id])
  accessToken  String    @default("")
  refreshToken String    @default("")
  video        Video?
  editor       Editor?
  invitation   Invitation?
  channel      Channel?
}

model Channel {
  id               Int       @id @default(autoincrement())
  youtuberId       Int       @unique
  youtuber         YouTuber  @relation(fields: [youtuberId], references: [id])
  channelId        String
  title            String
  ChannelPic       String
  description      String?
  viewCount        String
  subscriberCount  String
  hiddenSubsCount  Boolean?
  videoCount       String?
  invitation Invitation?
}


model Video {
  id         Int    @id @default( autoincrement())
  title       String
  description String
  status      String
  tags        String
  url         String
  youtuberId  Int? @unique
  youtuber    YouTuber? @relation(fields: [youtuberId],references: [id])
}

model Editor {
  id         Int    @id @default( autoincrement())
  userId    Int?     @unique
  user      User?    @relation(fields: [userId], references: [id])
  profile_pic String @unique
  description String
  experience String
  phone_number String
  country String
  state String
  city String
  youtuberId Int? @unique
  youtuber YouTuber? @relation(fields: [youtuberId],references: [id])
  invitation Invitation[]
}

model Invitation{
  id         Int    @id @default( autoincrement())
  youtuberId Int? @unique
  youtuber YouTuber? @relation(fields: [youtuberId],references: [id])
  editorId Int? @unique
  editor Editor? @relation(fields: [editorId],references: [id])
 channelId   Int?    @unique
  channel     Channel? @relation(fields: [channelId], references: [id])
  message String
  status String?
  viewed Boolean @default(false)
}